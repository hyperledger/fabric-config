//
//Copyright IBM Corp. 2017 All Rights Reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: sample.proto

package testprotos

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SimpleMsg is designed to test that all three types of message fields, plain, map,
// and slice are handled by the protolator tool
type SimpleMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlainField string            `protobuf:"bytes,1,opt,name=plain_field,json=plainField,proto3" json:"plain_field,omitempty"`
	MapField   map[string]string `protobuf:"bytes,2,rep,name=map_field,json=mapField,proto3" json:"map_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SliceField []string          `protobuf:"bytes,3,rep,name=slice_field,json=sliceField,proto3" json:"slice_field,omitempty"`
}

func (x *SimpleMsg) Reset() {
	*x = SimpleMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sample_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleMsg) ProtoMessage() {}

func (x *SimpleMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sample_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleMsg.ProtoReflect.Descriptor instead.
func (*SimpleMsg) Descriptor() ([]byte, []int) {
	return file_sample_proto_rawDescGZIP(), []int{0}
}

func (x *SimpleMsg) GetPlainField() string {
	if x != nil {
		return x.PlainField
	}
	return ""
}

func (x *SimpleMsg) GetMapField() map[string]string {
	if x != nil {
		return x.MapField
	}
	return nil
}

func (x *SimpleMsg) GetSliceField() []string {
	if x != nil {
		return x.SliceField
	}
	return nil
}

// NestedMsg is designed to test the nested message component
type NestedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlainNestedField *SimpleMsg            `protobuf:"bytes,1,opt,name=plain_nested_field,json=plainNestedField,proto3" json:"plain_nested_field,omitempty"`
	MapNestedField   map[string]*SimpleMsg `protobuf:"bytes,2,rep,name=map_nested_field,json=mapNestedField,proto3" json:"map_nested_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SliceNestedField []*SimpleMsg          `protobuf:"bytes,3,rep,name=slice_nested_field,json=sliceNestedField,proto3" json:"slice_nested_field,omitempty"`
}

func (x *NestedMsg) Reset() {
	*x = NestedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sample_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedMsg) ProtoMessage() {}

func (x *NestedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sample_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedMsg.ProtoReflect.Descriptor instead.
func (*NestedMsg) Descriptor() ([]byte, []int) {
	return file_sample_proto_rawDescGZIP(), []int{1}
}

func (x *NestedMsg) GetPlainNestedField() *SimpleMsg {
	if x != nil {
		return x.PlainNestedField
	}
	return nil
}

func (x *NestedMsg) GetMapNestedField() map[string]*SimpleMsg {
	if x != nil {
		return x.MapNestedField
	}
	return nil
}

func (x *NestedMsg) GetSliceNestedField() []*SimpleMsg {
	if x != nil {
		return x.SliceNestedField
	}
	return nil
}

// StaticallyOpaqueMsg is designed to test the statically opaque message component
// All fields are statically marshaled to the NestedMsg type
type StaticallyOpaqueMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlainOpaqueField []byte            `protobuf:"bytes,1,opt,name=plain_opaque_field,json=plainOpaqueField,proto3" json:"plain_opaque_field,omitempty"`
	MapOpaqueField   map[string][]byte `protobuf:"bytes,2,rep,name=map_opaque_field,json=mapOpaqueField,proto3" json:"map_opaque_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SliceOpaqueField [][]byte          `protobuf:"bytes,3,rep,name=slice_opaque_field,json=sliceOpaqueField,proto3" json:"slice_opaque_field,omitempty"`
}

func (x *StaticallyOpaqueMsg) Reset() {
	*x = StaticallyOpaqueMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sample_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticallyOpaqueMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticallyOpaqueMsg) ProtoMessage() {}

func (x *StaticallyOpaqueMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sample_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticallyOpaqueMsg.ProtoReflect.Descriptor instead.
func (*StaticallyOpaqueMsg) Descriptor() ([]byte, []int) {
	return file_sample_proto_rawDescGZIP(), []int{2}
}

func (x *StaticallyOpaqueMsg) GetPlainOpaqueField() []byte {
	if x != nil {
		return x.PlainOpaqueField
	}
	return nil
}

func (x *StaticallyOpaqueMsg) GetMapOpaqueField() map[string][]byte {
	if x != nil {
		return x.MapOpaqueField
	}
	return nil
}

func (x *StaticallyOpaqueMsg) GetSliceOpaqueField() [][]byte {
	if x != nil {
		return x.SliceOpaqueField
	}
	return nil
}

// VariablyOpaqueMsg is designed to test the staticaly opaque message component
// The opaque type is determined by opaque_type
type VariablyOpaqueMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpaqueType       string            `protobuf:"bytes,1,opt,name=opaque_type,json=opaqueType,proto3" json:"opaque_type,omitempty"`
	PlainOpaqueField []byte            `protobuf:"bytes,2,opt,name=plain_opaque_field,json=plainOpaqueField,proto3" json:"plain_opaque_field,omitempty"`
	MapOpaqueField   map[string][]byte `protobuf:"bytes,3,rep,name=map_opaque_field,json=mapOpaqueField,proto3" json:"map_opaque_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SliceOpaqueField [][]byte          `protobuf:"bytes,4,rep,name=slice_opaque_field,json=sliceOpaqueField,proto3" json:"slice_opaque_field,omitempty"`
}

func (x *VariablyOpaqueMsg) Reset() {
	*x = VariablyOpaqueMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sample_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariablyOpaqueMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariablyOpaqueMsg) ProtoMessage() {}

func (x *VariablyOpaqueMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sample_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariablyOpaqueMsg.ProtoReflect.Descriptor instead.
func (*VariablyOpaqueMsg) Descriptor() ([]byte, []int) {
	return file_sample_proto_rawDescGZIP(), []int{3}
}

func (x *VariablyOpaqueMsg) GetOpaqueType() string {
	if x != nil {
		return x.OpaqueType
	}
	return ""
}

func (x *VariablyOpaqueMsg) GetPlainOpaqueField() []byte {
	if x != nil {
		return x.PlainOpaqueField
	}
	return nil
}

func (x *VariablyOpaqueMsg) GetMapOpaqueField() map[string][]byte {
	if x != nil {
		return x.MapOpaqueField
	}
	return nil
}

func (x *VariablyOpaqueMsg) GetSliceOpaqueField() [][]byte {
	if x != nil {
		return x.SliceOpaqueField
	}
	return nil
}

// DynamicMsg is designed to test the dynamic message component
// The dynamic wrapper applied to ContextlessMsg is determined by
// dynamic_type
type DynamicMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicType       string                     `protobuf:"bytes,1,opt,name=dynamic_type,json=dynamicType,proto3" json:"dynamic_type,omitempty"`
	PlainDynamicField *ContextlessMsg            `protobuf:"bytes,2,opt,name=plain_dynamic_field,json=plainDynamicField,proto3" json:"plain_dynamic_field,omitempty"`
	MapDynamicField   map[string]*ContextlessMsg `protobuf:"bytes,3,rep,name=map_dynamic_field,json=mapDynamicField,proto3" json:"map_dynamic_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SliceDynamicField []*ContextlessMsg          `protobuf:"bytes,4,rep,name=slice_dynamic_field,json=sliceDynamicField,proto3" json:"slice_dynamic_field,omitempty"`
}

func (x *DynamicMsg) Reset() {
	*x = DynamicMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sample_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicMsg) ProtoMessage() {}

func (x *DynamicMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sample_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicMsg.ProtoReflect.Descriptor instead.
func (*DynamicMsg) Descriptor() ([]byte, []int) {
	return file_sample_proto_rawDescGZIP(), []int{4}
}

func (x *DynamicMsg) GetDynamicType() string {
	if x != nil {
		return x.DynamicType
	}
	return ""
}

func (x *DynamicMsg) GetPlainDynamicField() *ContextlessMsg {
	if x != nil {
		return x.PlainDynamicField
	}
	return nil
}

func (x *DynamicMsg) GetMapDynamicField() map[string]*ContextlessMsg {
	if x != nil {
		return x.MapDynamicField
	}
	return nil
}

func (x *DynamicMsg) GetSliceDynamicField() []*ContextlessMsg {
	if x != nil {
		return x.SliceDynamicField
	}
	return nil
}

// ContextlessMsg is designed to carry a message of completely arbitrary type
// Because there is no context for the type embedded in the message, the opaque
// type must be dynamically added at runtime
type ContextlessMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpaqueField []byte `protobuf:"bytes,1,opt,name=opaque_field,json=opaqueField,proto3" json:"opaque_field,omitempty"`
}

func (x *ContextlessMsg) Reset() {
	*x = ContextlessMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sample_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextlessMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextlessMsg) ProtoMessage() {}

func (x *ContextlessMsg) ProtoReflect() protoreflect.Message {
	mi := &file_sample_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextlessMsg.ProtoReflect.Descriptor instead.
func (*ContextlessMsg) Descriptor() ([]byte, []int) {
	return file_sample_proto_rawDescGZIP(), []int{5}
}

func (x *ContextlessMsg) GetOpaqueField() []byte {
	if x != nil {
		return x.OpaqueField
	}
	return nil
}

// UnmarshalableDeepFields contains fields which are defined to be opaque, but will
// return an error if they are asked to be deserialized.
type UnmarshalableDeepFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlainOpaqueField []byte            `protobuf:"bytes,1,opt,name=plain_opaque_field,json=plainOpaqueField,proto3" json:"plain_opaque_field,omitempty"`
	MapOpaqueField   map[string][]byte `protobuf:"bytes,2,rep,name=map_opaque_field,json=mapOpaqueField,proto3" json:"map_opaque_field,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SliceOpaqueField [][]byte          `protobuf:"bytes,3,rep,name=slice_opaque_field,json=sliceOpaqueField,proto3" json:"slice_opaque_field,omitempty"`
}

func (x *UnmarshalableDeepFields) Reset() {
	*x = UnmarshalableDeepFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sample_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmarshalableDeepFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmarshalableDeepFields) ProtoMessage() {}

func (x *UnmarshalableDeepFields) ProtoReflect() protoreflect.Message {
	mi := &file_sample_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmarshalableDeepFields.ProtoReflect.Descriptor instead.
func (*UnmarshalableDeepFields) Descriptor() ([]byte, []int) {
	return file_sample_proto_rawDescGZIP(), []int{6}
}

func (x *UnmarshalableDeepFields) GetPlainOpaqueField() []byte {
	if x != nil {
		return x.PlainOpaqueField
	}
	return nil
}

func (x *UnmarshalableDeepFields) GetMapOpaqueField() map[string][]byte {
	if x != nil {
		return x.MapOpaqueField
	}
	return nil
}

func (x *UnmarshalableDeepFields) GetSliceOpaqueField() [][]byte {
	if x != nil {
		return x.SliceOpaqueField
	}
	return nil
}

var File_sample_proto protoreflect.FileDescriptor

var file_sample_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x09, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x6d, 0x61, 0x70,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x02, 0x0a, 0x09, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x43, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x53, 0x0a, 0x10,
	0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61,
	0x70, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x43, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x58, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x93, 0x02, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x4f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x5f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x5d, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4d, 0x73,
	0x67, 0x2e, 0x4d, 0x61, 0x70, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0, 0x02, 0x0a, 0x11, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x79, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x5b, 0x0a, 0x10, 0x6d,
	0x61, 0x70, 0x5f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x79, 0x4f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x70, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x5f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x03, 0x0a, 0x0a, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x6c, 0x65, 0x73,
	0x73, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x57, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x70, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x6d, 0x61, 0x70, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x4a, 0x0a, 0x13, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x11, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x5e, 0x0a, 0x14,
	0x4d, 0x61, 0x70, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x73,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x22, 0x9b, 0x02, 0x0a, 0x17, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x65, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x61, 0x0a, 0x10, 0x6d,
	0x61, 0x70, 0x5f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x65, 0x65, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x4f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x6d, 0x61, 0x70, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x41, 0x0a, 0x13,
	0x4d, 0x61, 0x70, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sample_proto_rawDescOnce sync.Once
	file_sample_proto_rawDescData = file_sample_proto_rawDesc
)

func file_sample_proto_rawDescGZIP() []byte {
	file_sample_proto_rawDescOnce.Do(func() {
		file_sample_proto_rawDescData = protoimpl.X.CompressGZIP(file_sample_proto_rawDescData)
	})
	return file_sample_proto_rawDescData
}

var file_sample_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_sample_proto_goTypes = []any{
	(*SimpleMsg)(nil),               // 0: testprotos.SimpleMsg
	(*NestedMsg)(nil),               // 1: testprotos.NestedMsg
	(*StaticallyOpaqueMsg)(nil),     // 2: testprotos.StaticallyOpaqueMsg
	(*VariablyOpaqueMsg)(nil),       // 3: testprotos.VariablyOpaqueMsg
	(*DynamicMsg)(nil),              // 4: testprotos.DynamicMsg
	(*ContextlessMsg)(nil),          // 5: testprotos.ContextlessMsg
	(*UnmarshalableDeepFields)(nil), // 6: testprotos.UnmarshalableDeepFields
	nil,                             // 7: testprotos.SimpleMsg.MapFieldEntry
	nil,                             // 8: testprotos.NestedMsg.MapNestedFieldEntry
	nil,                             // 9: testprotos.StaticallyOpaqueMsg.MapOpaqueFieldEntry
	nil,                             // 10: testprotos.VariablyOpaqueMsg.MapOpaqueFieldEntry
	nil,                             // 11: testprotos.DynamicMsg.MapDynamicFieldEntry
	nil,                             // 12: testprotos.UnmarshalableDeepFields.MapOpaqueFieldEntry
}
var file_sample_proto_depIdxs = []int32{
	7,  // 0: testprotos.SimpleMsg.map_field:type_name -> testprotos.SimpleMsg.MapFieldEntry
	0,  // 1: testprotos.NestedMsg.plain_nested_field:type_name -> testprotos.SimpleMsg
	8,  // 2: testprotos.NestedMsg.map_nested_field:type_name -> testprotos.NestedMsg.MapNestedFieldEntry
	0,  // 3: testprotos.NestedMsg.slice_nested_field:type_name -> testprotos.SimpleMsg
	9,  // 4: testprotos.StaticallyOpaqueMsg.map_opaque_field:type_name -> testprotos.StaticallyOpaqueMsg.MapOpaqueFieldEntry
	10, // 5: testprotos.VariablyOpaqueMsg.map_opaque_field:type_name -> testprotos.VariablyOpaqueMsg.MapOpaqueFieldEntry
	5,  // 6: testprotos.DynamicMsg.plain_dynamic_field:type_name -> testprotos.ContextlessMsg
	11, // 7: testprotos.DynamicMsg.map_dynamic_field:type_name -> testprotos.DynamicMsg.MapDynamicFieldEntry
	5,  // 8: testprotos.DynamicMsg.slice_dynamic_field:type_name -> testprotos.ContextlessMsg
	12, // 9: testprotos.UnmarshalableDeepFields.map_opaque_field:type_name -> testprotos.UnmarshalableDeepFields.MapOpaqueFieldEntry
	0,  // 10: testprotos.NestedMsg.MapNestedFieldEntry.value:type_name -> testprotos.SimpleMsg
	5,  // 11: testprotos.DynamicMsg.MapDynamicFieldEntry.value:type_name -> testprotos.ContextlessMsg
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_sample_proto_init() }
func file_sample_proto_init() {
	if File_sample_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sample_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SimpleMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sample_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*NestedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sample_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*StaticallyOpaqueMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sample_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*VariablyOpaqueMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sample_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DynamicMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sample_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ContextlessMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sample_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UnmarshalableDeepFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sample_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sample_proto_goTypes,
		DependencyIndexes: file_sample_proto_depIdxs,
		MessageInfos:      file_sample_proto_msgTypes,
	}.Build()
	File_sample_proto = out.File
	file_sample_proto_rawDesc = nil
	file_sample_proto_goTypes = nil
	file_sample_proto_depIdxs = nil
}
